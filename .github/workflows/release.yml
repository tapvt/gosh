name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.3'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: |
        go test -v ./internal/...
        go test -v -tags=integration ./...

    - name: Build release binaries
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        COMMIT=$(git rev-parse --short HEAD)
        BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
        LDFLAGS="-X main.Version=${VERSION} -X main.Commit=${COMMIT} -X main.BuildTime=${BUILD_TIME}"
        
        mkdir -p build/release
        
        # Linux AMD64
        GOOS=linux GOARCH=amd64 go build -trimpath -ldflags "${LDFLAGS}" -o build/release/gosh-linux-amd64 cmd/main.go
        
        # Linux ARM64
        GOOS=linux GOARCH=arm64 go build -trimpath -ldflags "${LDFLAGS}" -o build/release/gosh-linux-arm64 cmd/main.go
        
        # macOS AMD64
        GOOS=darwin GOARCH=amd64 go build -trimpath -ldflags "${LDFLAGS}" -o build/release/gosh-darwin-amd64 cmd/main.go
        
        # macOS ARM64 (Apple Silicon)
        GOOS=darwin GOARCH=arm64 go build -trimpath -ldflags "${LDFLAGS}" -o build/release/gosh-darwin-arm64 cmd/main.go
        
        # Windows AMD64
        GOOS=windows GOARCH=amd64 go build -trimpath -ldflags "${LDFLAGS}" -o build/release/gosh-windows-amd64.exe cmd/main.go

    - name: Create release packages
      run: |
        cd build/release
        
        # Create tar.gz for Unix-like systems
        tar -czf gosh-linux-amd64.tar.gz gosh-linux-amd64
        tar -czf gosh-linux-arm64.tar.gz gosh-linux-arm64
        tar -czf gosh-darwin-amd64.tar.gz gosh-darwin-amd64
        tar -czf gosh-darwin-arm64.tar.gz gosh-darwin-arm64
        
        # Create zip for Windows
        zip gosh-windows-amd64.zip gosh-windows-amd64.exe
        
        # Generate checksums
        sha256sum *.tar.gz *.zip > checksums.txt

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        
        # Generate release notes from git log
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes since ${PREVIOUS_TAG}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "RELEASE_NOTES=Initial release" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ steps.release_notes.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        files: |
          build/release/*.tar.gz
          build/release/*.zip
          build/release/checksums.txt
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Homebrew formula (if main release)
      if: ${{ !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc') }}
      run: |
        echo "TODO: Add Homebrew formula update logic here"
        # This would typically involve creating a PR to a homebrew tap repository
